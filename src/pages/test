import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Attractions.css';

const Attractions = () => {
  const [attractions, setAttractions] = useState([]);
  const [selectedAttraction, setSelectedAttraction] = useState(null);
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAttractions = async () => {
      try {
        const response = await axios.get(`${BASE_URL}/attraction`, {
          params: {
            city_name: cityName,
            arrival_date: arrivalDate,
            departure_date: departureDate,
          },
          timeout: 60000,
        });
        setAttractions(response.data.data || []);
      } catch (error) {
        console.error("Error fetching attractions:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchAttractions();
  }, []);

  const handleBooking = async (attraction) => {
    if (!selectedDate || !selectedTime) {
      alert("Please select both date and time");
      return;
    }

    const payload = {
      attraction_name: attraction.attraction_name,
      attraction_description: attraction.attraction_description,
      attraction_price: attraction.attraction_price,
      attraction_availability_date: selectedDate,
      attraction_average_review: attraction.attraction_average_review,
      attraction_total_review: attraction.attraction_total_review,
      attraction_photo: attraction.attraction_photo,
      attraction_daily_timing: selectedTime,
    };

    try {
      const res = await axios.post(`${BASE_URL}/attraction`, payload, {
        headers: { "Content-Type": "application/json" },
      });
      alert(`Attraction posted! Response: ${JSON.stringify(res.data)}`);
    } catch (error) {
      console.error("Posting failed:", error);
      alert("Failed to post attraction");
    }
  };

  if (loading) return <div className="loading">Loading attractions...</div>;

  return (
    <div className="attractions-container">
      <h1>Available Attractions</h1>
      <div className="attractions-grid">
        {attractions.map((attraction) => {
          const isSelected =
            selectedAttraction?.attraction_id === attraction.attraction_id;
          return (
            <div
              key={attraction.attraction_id}
              className={`attraction-card ${isSelected ? "selected" : ""}`}
              onClick={() => setSelectedAttraction(attraction)}
            >
              <div className="card-header">
                <img
                  src={
                    attraction.attraction_photo ||
                    "https://via.placeholder.com/300x200"
                  }
                  alt={attraction.attraction_name}
                />
                <div className="card-title">
                  <h3>{attraction.attraction_name}</h3>
                  <p className="price">{attraction.attraction_price}</p>
                  {attraction.attraction_average_review && (
                    <div className="reviews">
                      â˜… {attraction.attraction_average_review} (
                      {attraction.attraction_total_review || 0} reviews)
                    </div>
                  )}
                </div>
              </div>

              <div className="card-body">
                <p className="description">
                  {attraction.attraction_description}
                </p>

                {isSelected && (
                  <div className="booking-controls">
                    {/* Date Select */}
                    <div className="form-group">
                      <label>Available Dates:</label>
                      <select
                        value={selectedDate}
                        onChange={(e) => {
                          setSelectedDate(e.target.value);
                          setSelectedTime("");
                        }}
                      >
                        <option value="">Select date</option>
                        {attraction.available_date?.map((dateObj) => (
                          <option
                            key={dateObj.availability_date}
                            value={dateObj.availability_date}
                          >
                            {new Date(
                              dateObj.availability_date
                            ).toLocaleDateString()}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Time Select */}
                    <div className="form-group">
                      <label>Available Times:</label>
                      <select
                        value={selectedTime}
                        onChange={(e) => setSelectedTime(e.target.value)}
                        disabled={!selectedDate}
                      >
                        <option value="">Select time</option>
                        {attraction.attraction_daily_timing?.map(
                          (timeSlot, index) => (
                            <option key={index} value={timeSlot.start_at}>
                              {new Date(timeSlot.start_at).toLocaleTimeString(
                                [],
                                { hour: "2-digit", minute: "2-digit" }
                              )}
                            </option>
                          )
                        )}
                      </select>
                    </div>

                    {/* Post Button */}
                    <button
                      className="book-btn"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleBooking(attraction);
                      }}
                      disabled={!selectedDate || !selectedTime}
                    >
                      Post Attraction
                    </button>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default Attractions;